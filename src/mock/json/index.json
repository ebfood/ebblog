{
  "mdList": [
    {
      "id": "0001",
      "date": "2021-3-15",
      "category": "前端",
      "tag": [
        "vue",
        "响应式布局",
        "CSS"
      ],
      "top": true,
      "title": "EBBLOG开发笔记",
      "description": "记录本博客的开发过程，技术点，踩过的坑。",
      "cover": "https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fstatic001.infoq.cn%2Fresource%2Fimage%2Fc4%2F01%2Fc4251ee38c2039602d69cac1d3ab9d01.jpg&refer=http%3A%2F%2Fstatic001.infoq.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618367358&t=ac837c3418183f9aa030b9c7cf7e7fb3",
      "content": "# 技术分析\n\n+ vue\n+ 响应式布局\n\n\n\n# 响应式布局\n\n思路：用container容器装下面紫色绿色蓝色，用@media媒体查询屏幕宽度，分成三个区间\n```scss\n@media screen and (min-width: 320px) and (max-width: 749px) {\n  @import \"~@/assets/CSS/mobile.scss\";\n}\n@media screen and (min-width: 750px) and (max-width: 1279px) {\n  @import \"~@/assets/CSS/middle.scss\";\n}\n```\n两个scss中，分别重写部分样式，把这些放在Home.vue的style的最下方，就可以覆盖组件里面的默认配置，目的就达成了！\n\n默认的配置第一区间，container默认的css\n![image-20210313170654253](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210313170654253.png)\n\n\n\n第二区间，调用middle.scss，适用于手机横屏，iPad\n\n![image-20210313185012723](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210313185012723.png)\n\n第三区间，侧边栏都跑到下面去，适用于手机。\n\n![image-20210313185119165](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210313185119165.png)\n\n\n"
    },
    {
      "id": "0002",
      "date": "2021-3-15",
      "category": "前端",
      "tag": [
        "CSS"
      ],
      "top": true,
      "title": "CSS学习笔记-bilibili-pink老师",
      "description": "这是CSS比较全面的属性，布局，实战，辅助工具(PS切图等等)学习记录，是根pink老师学习CSS码的，老师的讲课思路非常棒，因此笔记内容也就很好用。",
      "cover": "http://www.tastones.com/img/Tutorial/CSS/css-illustration.png",
      "content": "# 字体\n\n## font\n\nfont: font-style font-weight font-size/font-hight font-family\n\n+ 顺序不能颠倒\n+ 必须保留font-size font-family  eg: font 20px 'yahei'\n\n# 文本\n\n文本外观，颜色，对其，缩进，间距等等\n\n## 对齐 text-align\n\n只能设置水平对齐，是在盒子内对齐。\n\n## 装饰文本 text-decoration\n\n## 文本缩进 text-indent\n\ntext-indent  2em\n\n## 行高 line-height\n\n![image-20210306083614739](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210306083614739.png)\n\n从第一行的最下沿到第二行的最下沿就是行高\n\nline-height 等于盒子的高度，居中，大于盒子高度，偏下，小于盒子的高度，偏上\n\n# Emment语法\n\n+ 批量 div*10 + tab\n+ 包含> div>span + tab\n+ 兄弟 + \n+ .classname + tab 默认div  p.classname 就是<p class='classname'> </p>\n+ 自增符号$  eg: .classname$*5 就是自增排序了\n+  {}可以添加内容 比如 div{pig}*5 就是五个内涵pig的div  \n+ 混合${} eg: div{$}*5\n+ css 可以w100 + tab = width: 100px;\n\n \n\n# 复合选择器\n\n## 后代选择器\n\n 父 子 孙 ... {\n\n}\neg: .nav li a { color:  red;}\n\n## 子选择器\n\n最近一级子元素，亲儿子，孙子都不行\n父 > 子 {\n\n }\n\n## 并集选择器\n\na, b, c, ... {\n\n}\n\neg:  1. 喜欢竖写 2.最后一组不需要逗号 \ndiv, \np , \n.pig li {\n\n}\n\n# 伪类选择器\n\n## 链接\n\n+ a:link 未访问过的链接\n+ a:visited 访问过的\n+ a:hover 鼠标悬停\n+ a:active 鼠标正在按下还没有抬起来的   \n+ 需要按照lvha的顺序来定义才有效果\n\n## :focus\n\n选取获得焦点的表单\n\ninput:focus {\n}\n\n# 元素显示模式\n\n## 块元素\n\n+ 可以指定高度宽度\n+ 没有置顶宽度就和父亲一样宽\n+ 文字块级元素，h,p里面不能再放div了，会出问题\n\n## 行内元素\n\n+ 宽和高设置无效\n+ 只能放文本和行内，放块元素要出错\n\n## 行内块元素\n\n+ input img td\n+ 在一行上，但是之间有空白缝隙\n+ 默认宽度就是本身内容宽度\n+ 宽度高度，内外边距都可以控制\n\n## 行内 块 互相转化\n\ndisplay: block | inline | inline-block;\n\n# snipaste\n\n前端神器，我太爱了，可以截图，挂桌面，量px，取颜色\n\n# CSS背景\n\n## background-color\n\n## background-image\n\n+ <u>**装饰性图片** **logo 超大图片用背景图片**</u>\n  background-image: url( );\n\n+ background-repeat 背景平铺，默认平铺，可以选择no-repeat\n\n+ 背景颜色和背景图片可以混用，图片在上层\n\n## **background-positon** \n\n后面可以根方位名词和精确单位\n\n  1. 如果是方位名词，background-position *center top，两个值前后无关，顺序可以颠倒*\n     *省略一个，默认居中*\n  2. 如果是精确单位，第一个x，第二个y\n     *如果省略一个，默认给定的是x，剩下的一个居中*\n  3. 可以混合方位名词和精确单位, 第一个x，第二个y\n     *background-position: 20px center;*\n\n4. 超大背景图片用这个可以保证居中，直接给body一个bp属性，而且屏幕越大，看到的越多，但是中心核心内容都可以保证\n   `body {\n      background-image: url(...);\n      background-position: center top;\n   }`\n\n## 背景固定 background-attachment\n\n可以 **视差滚动** qq官网\n\nbackground-attachment: scroll | fixed;\n\n## 复合写法 background\n\nbackground: 颜色 图片地址 平铺 滚动 位置\n这个是约定俗成的顺序 \n\n## 背景半透明\n\nbackground: rgba(0, 0, 0, .5);\n\n\n\n# css 三大特性\n\n## 层叠性\n\n就是覆盖冲突的样式，样式冲突，就近原则。\n\n## 继承性\n\n+ 比如继承body的字体，颜色\n+ text- font- line- color 这些可以继承，高度，内外边距不可以继承\n+ 行高的继承，如果父亲设置行高1.5 那子元素的行高就是子元素字体大小的1.5倍\n  body{ font: 12px/1.5 'YaHei'} 就是子元素行高是字体的1.5\n\n## 优先级\n\n继承/*0000\t元素0001 \t类/伪类 0010\tID0100 \tstyle=\"\" 1000\t!important  inf\n继承的权重是0， 不管他爸选择器权重多高，所以继承的干不过浏览器默认样式\n\n### 权重叠加\n\nul li {} 的权重 0, 0, 0, 1+ 0, 0, 0, 1\n.nav li {} 0, 0, 1, 0 + 0, 0, 0, 1 \na:hover 11\n**叠加不会进位**\n\n# 盒子模型\n\n## 盒子模型\n\nmargin border padding content\n\n### border\n\n+ border: 1px solid red; 没有固定顺序\n  border-top: 2px solid red;\n  border-collapse: collapse; 合并相邻边框，应用场景：表格\n  **border会增加盒子的实际大小，需要减去**\n\n### padding\n\n+ padding v1\n  padding v1 v2\n  padding v1 v2 v3 左右v2，上1下3\n  **padding 也会影响盒子的实际大小，要计算好content的width和height，防止吧其他盒子送走** \n+ **tips** 可以利用padding撑开盒子，设置导航栏按钮，解决按钮内字数不同的问题，这样每个按钮之间距离看起来就是相等的\n  ![image-20210308140736111](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210308140736111.png)\n+ 在没指定width/height的时候padding不会撑开盒子大小，就是没设置宽度，继承了爸爸的宽度，然后padding就会往里面挤，如果设置了宽度，那padding就会往外扩张\n  （问：那那个a是咋回事呢? 猜测可能是inline-block）\n\n### margin\n\n+ computed可以看到参数\n+ 盒子水平居中 margin: 0 auto;\n  对于行内/行内块元素，则需要在他的父亲text-align: center\n+ 父盒子里面套子盒子，当子盒子设置了垂直margin，父盒子就会**塌陷**。\n  + 只要父亲有边框就不会塌陷\n  + 父亲来个内边距\n  + overflow: hidden;\n+ 清除内外边距` * {margin:0; padding:0}`\n+ 行内元素很大情况下上下外边距不起作用\n\n## 圆角边框\n\nborder-radius: 圆的半径 |  百分比; \n\n+ 圆形：先准备一个正方形 border-radius: 50%;\n+ 胶囊：高度的一半\n\n## 盒子阴影\n\nbox-shadow: h-shadow v-shadow blur spread color inset;\n\n+ h-shadow影子的左右\n+ blur 虚实\n+ spread 大小\n+ 默认外阴影 可选inset\n\n## 文字阴影\n\n同上 但是只有前四个值\n\n\n\n# 浮动\n\nCSS的三种传统布局方式是 标准流，浮动，定位，网页会由三种方式一起布局\n**网页布局第一准则：多个块级纵向排列找标准流，横向排列找浮动**\n\n**第二准则：先设置盒子大小，再设置盒子位置**\n\n## 浮动特性\n\n+ 1. 脱离标准流的控制，移动到指定位置，称作**脱标**\n  2. 萝卜不再保留原先的坑\n+ 如果多个盒子都浮动，会按照**一行内顶端对齐显示**，中间没有空隙\n+ **任何元素如果浮动会给予行内块元素的特性**，比如，块级盒如果没有设置宽度，默认和爸爸一样宽，但是浮动后，就由内容决定\n\n## 浮动搭配标准流父亲盒子\n\n一般，先用标准流父亲上下排列，然后在盒子内采用浮动排列左右位置。\n\n## 浮动注意点\n\n浮动的盒子只会影响盒子后面的标准流，不会影响前面的标准流。 \n\n\n\n## 清除浮动\n\n在父盒子没指定高度的时候，子盒子设置了浮动，那么父盒子高度会变成0\n清除浮动就是清除浮动造成的影响，爸爸可以根据孩子自动撑开高度,清除浮动的策略就是**闭合浮动**, 只让浮动在父盒子里面有影响.\nclear: both;\n\n1. **额外标签法**：最后一个孩子添加一个class, 然后css中选择并且添加 clear: both;\n   这个最后的盒子必须是块级元素\n\n2. **父亲添加overflow**\n\n3. **after伪元素**\n   在css添加如下代码\n\n   ```css\n   .clearfix:after {\n   \tcontent: \"\";\n   \tdisplay: block;\n   \theight: 0;\n   \tclear: both;\n   \tvisibility: hidden;\n   }\n   \n   .clearfix {\n   \t/* IE6、7 专有 */\n   \t*zoom: 1;\n   }\n   ```\n\n   然后在父元素上添加clearfix类\n\n4. **双伪元素**(推荐)\n\n   ```css\n   .clearfix:before,.clearfix:after {\n   \tcontent: \"\";\n   \tdisplay: table;\n   }\n   \n   .clearfix:after {\n   \tclear: both;\n   }\n   \n   .clearfix {\n   \t*zoom: 1;\n   }\n   ```\n\n\n\n# PS切图\n\n## 图层切图\n\n右键图层, 导出为png\n很多时候需要合并图层在导出, 先选中, 然后合并,然后在导出\n\n## 切片切图\n\n先切片, 文件, 导出, web格式, 选格式, 存储, 选中的切片, 保存\n如果想要透明, 就把背景隐藏掉\n切片选择工具可以移动切片位置, 选中切片按delete删除切片\n\n## cutterman切图\n\n官网下载安装, 窗口  扩展功能  cutterman\n直接选中,导出选中图层\n如果是多个图层, 那就合并导出选中图层 \n\n\n\n# 学成在线案例\n\n## CSS属性书写顺序(重要 )\n\n![image-20210309103409382](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210309103409382.png)\n\n## 布局思路\n\n1. 确定版心, 确定宽度\n2. 确定行模块, 用标准流\n3. 确定列模块, 用浮动\n4. 先写结构, 再写样式\n\n## 导航栏思路\n\n实际开发中,不会直接用链接a而**用li 包含at的做法**, 这是个professional的做法\n如果直接用a, 搜索引擎会觉得有关键字堆砌,降低网页权重\n\n\n\n# 定位\n\n可以让盒子在盒子中自由飞翔, 或者固定在屏幕的某个位置的时候用定位\n**定位 = 定位模式 + 边偏移**\n\n## static\n\n默认, 没有定位, 没有边偏移\n\n## relative\n\n1. 相对于原来位置的定位进行边偏移\n2. **不脱标**萝卜原来的坑会被保留, 因此很大程度上的用途是给绝对定位当爸爸\n\n## ablolute\n\n相对于祖先元素的绝对定位\n\n1. 如果没爸爸, or爸爸没有定位, 那document就是爸爸\n2. 祖先元素有定位(只要不是static), 那就是对于祖先的绝对定位, 祖先是爸爸, 爷爷, 都行, 最近的一个. \n3. 脱标, 萝卜坑不再保留\n\n## fixed\n\n以浏览器可视窗口为参照固定定位\n\n1. 和父亲没有关系, 也不随着滚动条滚动\n2. 脱标, 不留坑\n\n## sticky\n\n大部分的效果都是js, 而不是这个, 这个兼容性不好\n\n1. 浏览器窗口为参照物\n2. 不脱标, 留坑\n3. 必须添加top left right bottom其中的一个\n\n## 子绝父相\n\n当子采用绝对定位的时候, 需要父亲也拥有定位, 对于父亲来说, 拥有定位之后还要保留原来的位置, 于是父亲应当拥有相对定位.\n\n## fixed贴版心算法\n\nleft: 50%;\nmargin-left: 版心的一半;\n\n## 定位次序 z-index\n\n默认auto, 越大越靠上, 但是不能加单位\n只有定位的盒子才有此参数\n\n## 绝对定位居中\n\nleft: 50%;\nmargin-left: -盒子宽度的一半;\n\ntop: 50%;\nmargin-top: -高度的一半;\n\n## 定位特性\n\n1. 如果添加了absolute或者fixed, 就可以直接设置宽度无需转block\n2. 如果块元素加了定位, 还没给宽度高度, 那就是内容的宽高\n3. 脱标的盒子不会引起margin塌陷\n4. float不会压住标准流的文字, positon连文字都一起压住\n\n\n\n# 精灵图\n\n减少服务器请求次数, 加快页面加载速度.\n\n+ 针对于背景图片\n\n+ CSS二倍精灵图使用方法https://blog.csdn.net/weixin_39295546/article/details/104709129\n\n+ 二倍精灵图,所以用ps缩放一半\n\n  ![image-20210311151040935](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210311151040935.png)\n\n  ![image-20210311151130063](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210311151130063.png)\n\n  窗口 -> 信息 就可以看到当前鼠标坐标\n\n  ![image-20210311151223940](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210311151223940.png)\n\n  然后写代码\n\n\n\n# CSS3\n\n## 属性选择器\n\n+ E[att]\n+ **E[att=val]**\n+ E[att^=val] 属性att以val开头的元素\n+ E[att$=val] .....结尾.....\n+ E[att*=val] ......含有....\n+ 属性选择器权重10\n\n## 结构伪类选择器\n\n+ E:first-child\tE:last-child 是第一个孩子的E元素\n\n+ E:nth-child(n) 是第n个孩子的E元素\n   n可以是 even, odd\n  也可以是n, 只能是字母n, 就是选择了所有孩子\n  2n: 2x0 2x1 2x2 2x3 即偶数孩子\n  5n: 5的倍数\n  n+5: 从第五个到最后\n-n+5: 前5个\n  \n+ E:first-of-type\n\n  ```css\n  div:nth-child(1) {\n  \t/*先找指定序号, 再去看是不是指定元素*/\n  }\n  div:nth-of-type(1) {\n  \t/*先找指定元素, 再去找序号*/\n  }\n  ```\n\n  \n\n## 伪元素选择器\n\n通过CSS插入元素, 避免html标签嵌套, 叫伪元素是因为在文档树中找不到这个元素\n\n### element::before | element::after\n\n+ 在element里面的内容的前面/后面加上盒子\n+ 必须有content元素\n+ 是行内元素\n+ 权重是1\n\n\n\n## 渐变颜色\n\nbackground: -webkit-linear-gradient(left, red, blue)\n必须添加私有前缀\n\n\n"
    },
    {
      "id": "0003",
      "date": "2021-3-15",
      "category": "前端",
      "tag": [
        "CSS",
        "移动端布局"
      ],
      "top": true,
      "title": "移动端CSS学习笔记",
      "description": "学习移动端布局太重要了，值得分出来写个笔记，pink老师出了挺多移动端布局的教程，很系统也很精致，整理了精华部分。",
      "cover": "https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fmycloudb.com%2FAttach%2Fimage%2F20200606%2F20200606165117_94850.png&refer=http%3A%2F%2Fmycloudb.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618367710&t=dce06c6f680437ec7e720e0c391feca4",
      "content": "# 基础\n\n## meta视口标签\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n```\n\n取消默认的980px视口, 来用理想视口显示\n\n## 物理像素比\n\n在pc上1px等于屏幕上的一个像素点\n在移动端, 就不一定, 一个px能显示的物理像素点的个数, 称之为物理像素比or屏幕像素比\neg: iPhone678 都是2\n物理像素是750, 1px等于两个物理像素\n\n## 二倍图\n\n为了解决在**Retina屏幕**放大了图像倍数导致**模糊**的问题, 采用了倍图提高图像质量, 两倍于开发尺寸的图像大小, 压缩成正常大小\n\n## 二倍精灵图\n\nCSS使用二倍精灵图的方法https://blog.csdn.net/weixin_39295546/article/details/104709129\n\n## background-size\n\n+ 拉伸背景图, 只给一个参数就是宽度,\n+ 也可以给百分比, 更方便\n+ 值 cover是完全盖住盒子\n+ contain 宽度到了就行\n\n## 移动端开发选择\n\n+ 单独开发移动端页面\n+ 响应式兼容pc移动端 \n\n## 移动端初始化CSS\n\nnomalize.css\n\n## box-sizing\n\nbox-sizing: border-box;\n有了这句就让盒子变成CSS3盒子模型, border和padding不会再撑开盒子了. \n\n## 流式布局\n\n+ 也就是百分比布局\n+ max-width 最大宽度 min-width 最小宽度\n\n\n\n# flex布局\n\n## 原理\n\n+ float、clear、vertical-align属性失效\n+ 又叫伸缩布局 弹性布局\n+ 采用flex称作flex容器, 成员成为flex项目\n+ 通过给父亲添加flex属性,控制子盒子的位置和排列方式\n\n## flex 父项的属性\n\n**父亲必须有display: flex**\n\n### flex-direction 主轴方向\n\nflex-direction: row | column;\n\n+ 设置谁谁就是主轴, 剩下的就是侧轴喽\n+ 元素按照主轴排列\n\n### justify-content 主轴子元素对齐方式 \n\n+ 一定要先确认好主轴\n+ flex-start 左到右 默认\n+ center 居中对齐\n+ space-around 平分剩余空间\n+ space-between 两边贴边, 剩余平分\n\n### flex-wrap 换行\n\nflex默认不换行，如果装不开，缩小子元素宽度，硬塞进去\nflex-wrap: warp  就可以另起一行显示\n\n### align-items 侧轴上的对齐方式（单行）\n\n侧轴是相对于主轴的，默认的主轴是x\nalign-items: xxx\n\n+ flex-start | center | stretch(子元素不能设置高度，就会沿着y轴去拉伸)\n+ 对齐方式先主轴，然后侧轴, 所以 主轴是x, 还是y, 都居中, 结果不一样\n+ 只适用于单行子元素的情况\n\n### align-content 侧轴对齐方式（换行时）\n\n出现多行时候才有效\n\n+ flex-wrap: wrap; 因为有了换行，所以用align-content\n+ align-content:  flex-start | center | space-between | space-around...\n\n### flex-flow 符合属性\n\nflex-flow: row wrap;\n行主轴，而且换行\n\n## 子项属性\n\nflex的子项行内元素产生宽度高度\n\n### flex 剩余空间分几份\n\n排除了已经给的width/height, 剩余的距离平均分\nflex 1 | 2 |3 ..... 也可以是百分比\n注意, 这个的计算方式是, 一个父亲下有三个儿子flex分别是 1, 2, 3, 那就是分别占1/6, 2/6, 3/6\n\n ### 在侧轴上的单独行动\n\nalign-self 控制子项在侧轴上的排列方式\nalign-self: flex-end;\n\n### 排列顺序\n\norder: <number>; 越小越靠前，默认是0\n\n\n\n# Less\n\n## 变量\n\n@name: v;\teg: @fontColor: #333;\n\n## 编译\n\neasy less插件, 会自动编译css, 引用就好了\n\n## 嵌套\n\n```less\n.header {\n  a {\n    // 子元素直接卸载父元素里面\n    &:hover {\n      // 伪类, 伪元素, 交集选择器, 需要加&\n    }\n  }\n}\n```\n\n## 运算\n\n+ 运算符之间, 左右空格隔开\n+ 第二个数字可以省略单位\n+  两个数字单位不同,结果以第一个数的单位为准\n+ 除法需要加括号\n\n## @import\n\n可以吧一个less导入less, link是导入到html\n\n\n\n# rem布局\n\n## 基础\n\nem是相对于父元素的字体大小来说的, rem是相对于html元素的字体大小来说的, 所以整体用rem布局, 当页面大小改变的时候, 只需要改变html元素的字体大小, 就可以实现改变页面元素大小整体控制\n\n## 媒体查询\n\n@media可以根据不同的屏幕尺寸设置不同样式\n\n```css\n@media screen and (max-width:800px){\n  /* 在小于等于800px的屏幕上 */\n}\n@media screen and (max-width:600px){\n  /* 在小于等于600px的屏幕上 */\n}\n@media screen and (min-width:600px) and (max-width:700px) {\n  /* 在600px-700px的屏幕上 */\n}\n```\n\n+ 一般按照从大到小or从小到大来设置\n  从小到大更简洁, 因为可以层叠\n\n## 引入资源\n\n当样式比较多, 直接在link中判断设备尺寸, 准备多套css, 根据尺寸调不同的css\neg: 当屏幕够大, 一行三个div, 当小屏幕, 一行1个div \n\n```css\n<link rel=\"stylesheet\" href=\"style320.css\" media=\"screen and (min-width: 320px)\">\n    <link rel=\"stylesheet\" href=\"style640.css\" media=\"screen and (min-width: 640px)\">\n```\n\n## rem适配方案\n\n1. less + 媒体查询 + rem\n2. flexible.js + rem\n\n\n\n# less+ 媒体查询 + rem\n\n## 元素大小\n\npink老师讲的太好: https://www.bilibili.com/video/BV14J4114768?p=453\n\n+ 将屏幕划分n等份, 作为html字体大小\n+ 页面元素rem = 页面元素值px / (屏幕宽度/分的份数n)\n+ or  元素rem = px / html.font-size\n\n来康康苏宁的写法\n\n![image-20210312103243050](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210312103243050.png)\n\n苏宁分了15份\n\n***<u>所以, 就照着750px宽度, 分成15份去写, 也就是一份50px, 去算rem, 在其他尺寸会自适应!!!!</u>***\n\n- *重点是, 假设给的设计稿是750px, 要求切15等份, 那么一份就是50px, 设置less变量@baseFont: 50px; 量取设计稿的px之后, 比如说36px的按钮, 那就是 (36rem / @baseFont), 就会转化成rem 注意 #baseFont应该跟着设计稿计算出来在设置, 要和设计稿尺寸统一, 就可以算出rem, 之后无论什么尺寸, 都是按照比例缩放的.*\n\n详见苏宁项目\n\n# flexible.js\n\n+ 自动划分10等份, 不需要去写媒体查询啦, 要做的只是按照设计稿/10得到font-size, 然后去算rem\n\n+ 因为是按照整个屏幕划分的, 因此需要加max-width约束一下\n\n+ 限制750宽度\n\n  ```css\n  @media screen and (min-width:750px) {\n    html {\n      font-size: 75px!important;\n    }\n  }\n  ```\n\n  \n\n## CSSREM 插件\n\n自动转化rem, 神器, 记得设置htmlroot的font-size哦, 不然默认是16px\n\nwebstrom 里面的是px2rem, 首选项  px to rem 设置root fontsize\n\n\n\n\n\n# 响应式开发\n\n基于媒体查询, 有一组划分屏幕的档位\n\n![image-20210312195200106](https://ebcode.oss-cn-shanghai.aliyuncs.com/img/image-20210312195200106.png)\n\n## 布局容器\n\n不同屏幕下, 通过媒体查询改变布局容器的大小, 再改变里面的子元素排列方式, 从而实现在不同屏幕下, 看到的布局样式不同\n\n一般叫做container, 直接用@media设置\n\n"
    }
  ]
}
